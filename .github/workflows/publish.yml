name: Publish
# This job builds and publishes the package to NuGet.
# It depends on the included tests job to complete successfully.
# The version number is determined by the existing tag provided 
# when manually triggering the workflow. 
# The tag is not limited to a certain branch.
on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Enter an existing version tag to publish (e.g., "v5.1.0" or "v6.0.0-pre.1")'
        required: true
        type: string

jobs:
  tests:
    runs-on: ubuntu-22.04
    # ubuntu-latest = ubuntu-24.04 does not include mono needed for tests (2025-08-01)
    outputs:
      VERSION: ${{ steps.set_version.outputs.VERSION }}
    steps:
    - name: Verify tag exists
      run: |
        git fetch --tags --quiet
        if ! git rev-parse "${{ inputs.version_tag }}" >/dev/null 2>&1; then
          echo "::error::Tag '${{ inputs.version_tag }}' does not exist."
          echo "Available tags:"
          git tag -l
          exit 1
        fi

    - name: Checkout tag
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches
        ref: ${{ inputs.version_tag }}

    - name: Set VERSION output
      id: set_version
      run: |
         Version="${{ inputs.version_tag }}"
         # Strip 'v' prefix for VERSION variable
         Version="${Version#v}"
         echo "VERSION=$Version" >> $GITHUB_ENV
         echo "VERSION=$Version" >> $GITHUB_OUTPUT
         echo "Version: $Version"

    - name: Set Git config for line endings
      run: git config --global core.autocrlf true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          6.0.x
          3.1.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release -p:nowarn=1591

    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity quiet

  publish:
    runs-on: ubuntu-22.04
    needs: tests

    steps:
    - name: Checkout tag
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches
        ref: ${{ inputs.version_tag }}

    - name: Set Git config for line endings
      run: git config --global core.autocrlf true

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x

    - name: Use verified version
      run: |
        # Reuse the version from tests job
        echo "Using version: ${{ needs.tests.outputs.VERSION }}"
        echo "VERSION=${{ needs.tests.outputs.VERSION }}" >> $GITHUB_ENV

    - name: Set version variables
      run: |
        FileVersion=${VERSION%%-*}
        AssemblyVersion=${VERSION%%.*}.0.0
        echo "FILE_VERSION=$FileVersion" >> $GITHUB_ENV
        echo "ASSEMBLY_VERSION=$AssemblyVersion" >> $GITHUB_ENV
        echo "File Version: $FileVersion"
        echo "Assembly Version: $AssemblyVersion"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build and pack for publishing
      run: |  
        dotnet build --configuration Release Ical.Net/Ical.Net.csproj \
          -p:Version=${{env.VERSION}} \
          -p:FileVersion=${{env.FILE_VERSION}} \
          -p:AssemblyVersion=${{env.ASSEMBLY_VERSION}} \
          -p:IncludeSymbols=true \
          -p:SymbolPackageFormat=snupkg \
          -p:ContinuousIntegrationBuild=true

        dotnet pack --configuration Release Ical.Net/Ical.Net.csproj \
          -p:Version=${{env.VERSION}} \
          -p:IncludeSymbols=true \
          -p:SymbolPackageFormat=snupkg \
          --no-build

    - name: Store artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ICal.Net_pkg_${{env.VERSION}}.${{github.run_number}}
        path: |
          Ical.Net/bin/Release/**/*.nupkg
          Ical.Net/bin/Release/**/*.snupkg

    - name: Push package to NuGet
      # Does not fail, if the package already exists
      run: |
        dotnet nuget push Ical.Net/bin/Release/Ical.Net.${{env.VERSION}}.nupkg \
          --api-key ${{secrets.NUGET_API_KEY}} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
